#That is SQL code used in Periscope.
#The output is put as CSV on URL 
#Needs to output by chunks of 10,000 observations since Periscope doesn't scale

with  leads_without_dups_with_counts as (
select count(*) as cnt, current_loan_leadid from 
analytics.universe_of_ids_for_so as univ
left outer join [loanid_leadid_connector as conn]
on univ.infinity_loan_id = conn.loanid
group by current_loan_leadid
having cnt<2
) ,

lead_universe as (

select  current_loan_leadid, mobile_phone, home_phone, work_phone, lw.created, 
zip::integer as zip_int, long as ld_longtitude, lat as ld_latitude  from 
analytics.universe_of_ids_for_so as univ
left outer join [loanid_leadid_connector as conn]
on univ.infinity_loan_id = conn.loanid
left outer join loans_view as lw
on univ.infinity_loan_id = lw.id
left outer join leads as ls
on conn.current_loan_leadid=ls.id
left outer join zip_code_mapping1 as zm
on ls.zip = zm.zipcode 
where current_loan_leadid is not null  and current_loan_leadid in ( select current_loan_leadid from leads_without_dups_with_counts   )
  
), 

so_transformed_zip as (
select case when len(contactzipout)>0  and substring(contactzipout from 1 for 
1)!='V' then trim(substring(contactzipout from 1 for 5))::int
else NULL end as contactzipout_int, *, 
regexp_replace(UPPER(providernameout),'-[A-Z][A-Z]|- [A-Z][A-Z]| [A-Z][A-Z]$|CABLE|COM[M]+$| COM[M]+ ','') as providernameout2  
from [service_objects_gppl2 as so] 
 ),  

so_data_and_contact_longt_alt  as (
   
select so_tr.*, long as contact_longtitude, lat as contact_latitude from so_transformed_zip as so_tr
left outer join zip_code_mapping1 as zm on
so_tr.contactzipout_int = zm.zipcode
)

select 

len(upper(trim(li.fname)) || ' ' || upper(trim(li.lname))) as len_of_name_in_leads,
len(li.address) as len_of_address_in_leads,

case when so_mob.providernameout2 like '%CINGULAR%' then 'CINGULAR'
when so_mob.providernameout2 like '%VERIZON%' then 'VERIZON'
when so_mob.providernameout2 like '%SPRINT%' then 'SPRINT'
when so_mob.providernameout2 like '%T-MOBILE%' then 'T-MOBILE'
when so_mob.providernameout2 like '%TBILE%' then 'T-MOBILE'
when so_mob.providernameout2 like '%METRO%PCS%' then 'METRO_PCS'
when so_mob.providernameout2 like '%CELL ONE%' then 'CELL_ONE'
when so_mob.providernameout2 like '%AERIAL%' then 'AERIAL'
when so_mob.providernameout2 like '%POWERTEL%' then 'POWERTEL'
when so_mob.providernameout2 like '%UNITED STATES CEL%' then 'US_CEL'
when so_mob.providernameout2 like 'AT&T%' then 'AT&T'
when so_mob.providernameout2 like 'OMNIPOINT%' then 'OMNIPOINT'
when so_mob.providernameout2 is not null and so_mob.providernameout2 not like '%CINGULAR%' 
                              and so_mob.providernameout2 not like '%VERIZON%' and so_mob.providernameout2 not like '%SPRINT%' and so_mob.providernameout2 not like '%T-MOBILE%'
                              and so_mob.providernameout2 not like '%TBILE%' and so_mob.providernameout2 not like '%METRO%PCS%' and so_mob.providernameout2 not like '%CELL ONE%'
                              and so_mob.providernameout2 not like '%AERIAL%' and so_mob.providernameout2 not like '%POWERTEL%' and so_mob.providernameout2 not like '%UNITED STATES CEL%'
                              and so_mob.providernameout2 not like '%AT&T%' and so_mob.providernameout2 not like '%OMNIPOINT%'  
                              then 'OTHER'
else null end as m_provider_name,

case when so_work.providernameout2 like '%SERVICE%MANAGEMENT%' then 'SERV_MNGM'
when so_work.providernameout2 like '%BELL%' then 'BELL'
when so_work.providernameout2 like '%QWEST%' then 'QWEST'
when so_work.providernameout2 like '%LEVEL%3' then 'LEVEL3'
when so_work.providernameout2 like '%EPORT%' then 'EPORT'
when so_work.providernameout2 like '%CENTURYLINK%' then 'CENTURY'
when so_work.providernameout2 like '%BANDWIDTH%' then 'BANDWIDTH'
when so_work.providernameout2 like '%FIBERLINK%' then 'FIBERLINK'
when so_work.providernameout2 like '%TIME%WARNER%' then 'TIME_WRNR'
when so_work.providernameout2 like '%VERIZON%' then 'VERIZON'
when so_work.providernameout2 like '%SPRINT%' then 'SPRINT'
when so_work.providernameout2 like '%T-MOBILE%' then 'T-MOBILE'
when so_work.providernameout2 like '%TBILE%' then 'T-MOBILE'
when so_work.providernameout2 like '%COMCAST%' then 'COMCAST'
when so_work.providernameout2 like '%CINGULAR%' then 'CINGULAR'
when so_work.providernameout2 is not null and so_work.providernameout2 not like '%SERVICE%MANAGEMENT%' 
                              and so_work.providernameout2 not like '%BELL%' and so_work.providernameout2 not like '%QWEST%' and so_work.providernameout2 not like '%LEVEL%3%'
                              and so_work.providernameout2 not like '%EPORT%' and so_work.providernameout2 not like '%CENTURYLINK%' and so_work.providernameout2 not like '%BANDWIDTH%'
                              and so_work.providernameout2 not like '%FIBERLINK%' and so_work.providernameout2 not like '%TIME%WARNER%' and so_work.providernameout2 not like '%VERIZON%'
                              and so_work.providernameout2 not like '%SPRINT%' and so_work.providernameout2 not like '%T-MOBILE%' and so_work.providernameout2 not like '%TBILE%'
                              and so_work.providernameout2 not like '%COMCAST%' and so_work.providernameout2 not like '%CINGULAR%' 
                              then 'OTHER'
else null end as w_provider_name,


case when so_hom.providernameout2 like '%CINGULAR%' then 'CINGULAR'
when so_hom.providernameout2 like '%VERIZON%' then 'VERIZON'
when so_hom.providernameout2 like '%SPRINT%' then 'SPRINT'
when so_hom.providernameout2 like '%T-MOBILE%' then 'T-MOBILE'
when so_hom.providernameout2 like '%TBILE%' then 'T-MOBILE'
when so_hom.providernameout2 like '%METRO%PCS%' then 'METRO_PCS'
when so_hom.providernameout2 like '%CELL ONE%' then 'CELL_ONE'
when so_hom.providernameout2 like '%AERIAL%' then 'AERIAL'
when so_hom.providernameout2 like '%POWERTEL%' then 'POWERTEL'
when so_hom.providernameout2 like '%UNITED STATES CEL%' then 'US_CEL'
when so_hom.providernameout2 like '%AT&T%' then 'AT&T'
when so_hom.providernameout2 like 'OMNIPOINT%' then 'OMNIPOINT'
when so_hom.providernameout2 is not null and so_hom.providernameout2 not like '%CINGULAR%' 
                              and so_hom.providernameout2 not like '%VERIZON%' and so_hom.providernameout2 not like '%SPRINT%' and so_hom.providernameout2 not like '%T-MOBILE%'
                              and so_hom.providernameout2 not like '%TBILE%' and so_hom.providernameout2 not like '%METRO%PCS%' and so_hom.providernameout2 not like '%CELL ONE%'
                              and so_hom.providernameout2 not like '%AERIAL%' and so_hom.providernameout2 not like '%POWERTEL%' and so_hom.providernameout2 not like '%UNITED STATES CEL%'
                              and so_hom.providernameout2 not like '%AT&T%' and so_hom.providernameout2 not like '%OMNIPOINT%'  
                              then 'OTHER'
else null end as h_provider_name,


case when length(mobile_phone)>= 10 and length(work_phone)>=10 and mobile_phone=work_phone then 1
     when length(mobile_phone)>= 10 and length(work_phone)>=10 and mobile_phone != work_phone then 0
  else null
end as m_w_phone_match,

case when length(mobile_phone) >= 10 and length(home_phone)>=10 and mobile_phone  = home_phone then 1
     when length(mobile_phone)>= 10 and length(home_phone)>=10 and mobile_phone != home_phone then 0
  else null
end as m_h_phone_match,

case when length(work_phone)>= 10 and length(home_phone)>=10 and work_phone  = home_phone then 1
     when length(work_phone)>= 10 and length(home_phone)>= 10 and work_phone != home_phone then 0
  else null
end as w_h_phone_match,

case when length(mobile_phone)>= 10 and length(work_phone)>= 10 and length(home_phone)>=10 and work_phone = home_phone and mobile_phone  = home_phone then 1
     when length(mobile_phone)>= 10 and length(work_phone)>= 10 and length(home_phone)>= 10 and ( work_phone != home_phone or mobile_phone!= home_phone ) then 0
  else null
end as m_w_h_phone_match,



 2 * 3961 * asin(sqrt((sin(radians((so_mob.contact_latitude - ld_latitude) / 2))) ^ 2 + cos(radians(ld_latitude)) * cos(radians(so_mob.contact_latitude)) * (sin(radians((so_mob.contact_longtitude - ld_longtitude) / 2))) ^ 2)) as m_zip_haversine_distance,

 2 * 3961 * asin(sqrt((sin(radians((so_work.contact_latitude - ld_latitude) / 2))) ^ 2 + cos(radians(ld_latitude)) * cos(radians(so_work.contact_latitude)) * (sin(radians((so_work.contact_longtitude - ld_longtitude) / 2))) ^ 2)) as w_zip_haversine_distance,

 2 * 3961 * asin(sqrt((sin(radians((so_hom.contact_latitude - ld_latitude) / 2))) ^ 2 + cos(radians(ld_latitude)) * cos(radians(so_hom.contact_latitude)) * (sin(radians((so_hom.contact_longtitude - ld_longtitude) / 2))) ^ 2)) as h_zip_haversine_distance,

-- so_mob.contact_longtitude as m_longtitude, so_mob.contact_latitude as m_latitude, 
-- so_work.contact_longtitude as  w_longtitude, so_work.contact_latitude as w_latitude,
-- so_hom.contact_longtitude as h_longtitude, so_hom.contact_latitude as h_latitude,
-- ld_longtitude, ld_latitude, 

case when length(mobile_phone)>= 10 and length(work_phone)>=10 and substring(mobile_phone from 1 for 3) = substring(work_phone from 1 for 3) then 1
     when length(mobile_phone)>= 10 and length(work_phone)>=10 and substring(mobile_phone from 1 for 3) != substring(work_phone from 1 for 3) then 0
  else null
end as m_w_area_match,

case when length(mobile_phone)>= 10 and length(home_phone)>=10 and substring(mobile_phone from 1 for 3) = substring(home_phone from 1 for 3) then 1
     when length(mobile_phone)>= 10 and length(home_phone)>=10 and substring(mobile_phone from 1 for 3) != substring(home_phone from 1 for 3) then 0
  else null
end as m_h_area_match,

case when length(work_phone)>= 10 and length(home_phone)>=10 and substring(work_phone from 1 for 3) = substring(home_phone from 1 for 3) then 1
     when length(work_phone)>= 10 and length(home_phone)>= 10 and substring(work_phone from 1 for 3) != substring(home_phone from 1 for 3) then 0
  else null
end as w_h_area_match,

case when length(mobile_phone)>= 10 and length(work_phone)>= 10 and length(home_phone)>=10 and substring(work_phone from 1 for 3) = substring(home_phone from 1 for 3) and substring(mobile_phone from 1 for 3) = substring(home_phone from 1 for 3) then 1
     when length(mobile_phone)>= 10 and length(work_phone)>= 10 and length(home_phone)>= 10 and ( substring(work_phone from 1 for 3) != substring(home_phone from 1 for 3) or substring(mobile_phone from 1 for 3) != substring(home_phone from 1 for 3)  ) then 0
  else null
end as m_w_h_area_match,


mobile_phone, work_phone, home_phone, current_loan_leadid,
  case when (so_mob.notecodes like '%,1,%' or so_mob.notecodes  like '1,%' or so_mob.notecodes='1' or so_mob.notecodes  like '%,1') then 1
       else 0
  end as m_Is_Mailable,
  case when (so_mob.notecodes like '%,2,%' or so_mob.notecodes  like '2,%' or so_mob.notecodes='2' or so_mob.notecodes  like '%,2') then 1
       else 0
  end as m_Is_Connected,
  case when (so_mob.notecodes like '%,3,%' or so_mob.notecodes  like '3,%' or so_mob.notecodes='3' or so_mob.notecodes  like '%,3') then 1
       else 0
  end as m_Is_Ported,
  case when (so_mob.notecodes like '%,4,%' or so_mob.notecodes  like '4,%' or so_mob.notecodes='4' or so_mob.notecodes  like '%,4') then 1
       else 0
  end as m_Is_Wireless,
  case when (so_mob.notecodes like '%,5,%' or so_mob.notecodes  like '5,%' or so_mob.notecodes='5' or so_mob.notecodes  like '%,5') then 1
       else 0
  end as m_Is_Unknown_Contact,
  case when (so_mob.notecodes like '%,7,%' or so_mob.notecodes  like '7,%' or so_mob.notecodes='7' or so_mob.notecodes  like '%,7') then 1
       else 0
  end as m_Is_Toll_Free_Number,
  case when (so_mob.notecodes like '%,8,%' or so_mob.notecodes  like '8,%' or so_mob.notecodes='8' or so_mob.notecodes  like '%,8') then 1
       else 0
  end as m_Is_Google_Voice_Number,
  case when (so_mob.notecodes like '%,10,%' or so_mob.notecodes  like '10,%' or so_mob.notecodes='10' or so_mob.notecodes  like '%,10') then 1
       else 0
  end as m_Is_Possible_Disconnected,
  case when (so_mob.notecodes like '%,11,%' or so_mob.notecodes  like '11,%' or so_mob.notecodes='11' or so_mob.notecodes  like '%,11') then 1
       else 0
  end as m_Is_Portable_Voip,
  case when (so_mob.notecodes like '%,12,%' or so_mob.notecodes  like '12,%' or so_mob.notecodes='12' or so_mob.notecodes  like '%,12') then 1
       else 0
  end as m_Is_Possible_Portable_Voip,

case when so_mob.contactaddressout like '%PO BOX%' then 1
     when so_mob.contactaddressout is not null and len(so_mob.contactaddressout)>0 and so_mob.contactaddressout not like '%PO BOX%' then 0
  end as m_is_contact_address_po_box, 

case when levenshtein(so_mob.contactaddressout, upper(li.address)) < 8 then 1
    when so_mob.contactaddressout is not null and len(so_mob.contactaddressout)>0 and levenshtein(so_mob.contactaddressout, upper(li.address)) >= 8 then 0 end as m_contact_address_match_lev8,

case when so_mob.contactaddressout is not null and len(so_mob.contactaddressout)>0 then levenshtein(so_mob.contactaddressout, upper(li.address))
else null end as m_cont_addr_lev_dist,
case when so_mob.contactaddressout is not null and len(so_mob.contactaddressout)>0 then 
 len(so_mob.contactaddressout) 
else null end as m_cont_addr_len,
case when so_mob.contactaddressout is not null and len(so_mob.contactaddressout)>0 then 
    (levenshtein(so_mob.contactaddressout, upper(li.address)))::float/greatest(len(so_mob.contactaddressout), len(li.address))
else null end as m_cont_addr_lev_dist_ratio,
  
case when so_mob.contactnameout is not null and len(so_mob.contactnameout)>0 then levenshtein( upper(trim(so_mob.contactnameout)), upper(trim(li.fname)) || ' ' || upper(trim(li.lname))) 
else null end as m_cont_name_lev_dist,
case when so_mob.contactnameout is not null and len(so_mob.contactnameout)>0 then 
  len(so_mob.contactnameout) 
else null end as m_cont_name_len,
case when so_mob.contactnameout is not null and len(so_mob.contactnameout)>0 then 
    (levenshtein( upper(trim(so_mob.contactnameout)), upper(trim(li.fname)) || ' ' || upper(trim(li.lname)) ))::float/greatest(len(upper(trim(so_mob.contactnameout)) ), len(upper(trim(li.fname)) || ' ' || upper(trim(li.lname))) )
else null end as m_cont_name_lev_dist_ratio, 
case when position( upper(trim(li.lname)) in upper(trim(so_mob.contactnameout)) ) > 0 then 1
     when so_mob.contactnameout is not null and len(so_mob.contactnameout)>0  and position( upper(trim(li.lname)) in upper(trim(so_mob.contactnameout)) ) = 0 then 0 end
as m_last_name_match,

so_mob.contactqualityscore as m_contact_quality_score,
so_mob.contactphonetype as m_contact_phone_type,
extract( days from (so_mob.dateofporting - lead_universe.created ) ) as m_days_of_porting_since_in_infinity,

  case when (so_work.notecodes like '%,1,%' or so_work.notecodes  like '1,%' or so_work.notecodes='1' or so_work.notecodes  like '%,1') then 1
       else 0
  end as w_Is_Mailable,
  case when (so_work.notecodes like '%,2,%' or so_work.notecodes  like '2,%' or so_work.notecodes='2' or so_work.notecodes  like '%,2') then 1
       else 0
  end as w_Is_Connected,
  case when (so_work.notecodes like '%,3,%' or so_work.notecodes  like '3,%' or so_work.notecodes='3' or so_work.notecodes  like '%,3') then 1
       else 0
  end as w_Is_Ported,
  case when (so_work.notecodes like '%,4,%' or so_work.notecodes  like '4,%' or so_work.notecodes='4' or so_work.notecodes  like '%,4') then 1
       else 0
  end as w_Is_Wireless,
  case when (so_work.notecodes like '%,5,%' or so_work.notecodes  like '5,%' or so_work.notecodes='5' or so_work.notecodes  like '%,5') then 1
       else 0
  end as w_Is_Unknown_Contact,
  case when (so_work.notecodes like '%,7,%' or so_work.notecodes  like '7,%' or so_work.notecodes='7' or so_work.notecodes  like '%,7') then 1
       else 0
  end as w_Is_Toll_Free_Number,
  case when (so_work.notecodes like '%,8,%' or so_work.notecodes  like '8,%' or so_work.notecodes='8' or so_work.notecodes  like '%,8') then 1
       else 0
  end as w_Is_Google_Voice_Number,
  case when (so_work.notecodes like '%,10,%' or so_work.notecodes  like '10,%' or so_work.notecodes='10' or so_work.notecodes  like '%,10') then 1
       else 0
  end as w_Is_Possible_Disconnected,
  case when (so_work.notecodes like '%,11,%' or so_work.notecodes  like '11,%' or so_work.notecodes='11' or so_work.notecodes  like '%,11') then 1
       else 0
  end as w_Is_Portable_Voip,
  case when (so_work.notecodes like '%,12,%' or so_work.notecodes  like '12,%' or so_work.notecodes='12' or so_work.notecodes  like '%,12') then 1
       else 0
  end as w_Is_Possible_Portable_Voip,

case when so_work.contactaddressout like '%PO BOX%' then 1
     when so_work.contactaddressout is not null and len(so_work.contactaddressout)>0 and so_work.contactaddressout not like '%PO BOX%' then 0
  end as w_is_contact_address_po_box, 

case when levenshtein(so_work.contactaddressout, upper(li.address)) < 8 then 1
   when so_work.contactaddressout is not null and len(so_work.contactaddressout)>0 and levenshtein(so_work.contactaddressout, upper(li.address)) >= 8 then 0 end as w_contact_address_match_lev8,

 case when so_work.contactaddressout is not null and len(so_work.contactaddressout)>0 then levenshtein(so_work.contactaddressout, upper(li.address))
else null end as w_cont_addr_lev_dist,
case when so_work.contactaddressout is not null and len(so_work.contactaddressout)>0 then 
len(so_work.contactaddressout) 
else null end as w_cont_addr_len,
case when so_work.contactaddressout is not null and len(so_work.contactaddressout)>0 then 
    (levenshtein(so_work.contactaddressout, upper(li.address)))::float/greatest(len(so_work.contactaddressout), len(li.address))
else null end as w_cont_addr_lev_dist_ratio,

case when so_work.contactnameout is not null and len(so_work.contactnameout)>0 then levenshtein( upper(trim(so_work.contactnameout)), upper(trim(li.fname)) || ' ' || upper(trim(li.lname))) 
else null end as w_cont_name_lev_dist,
case when so_work.contactnameout is not null and len(so_work.contactnameout)>0 then 
  len(so_work.contactnameout) 
else null end as w_cont_name_len,
case when so_work.contactnameout is not null and len(so_work.contactnameout)>0 then 
    (levenshtein( upper(trim(so_work.contactnameout)), upper(trim(li.fname)) || ' ' || upper(trim(li.lname)) ))::float/greatest(len(upper(trim(so_work.contactnameout)) ), len(upper(trim(li.fname)) || ' ' || upper(trim(li.lname))) )
else null end as w_cont_name_lev_dist_ratio, 
case when position( upper(trim(li.lname)) in upper(trim(so_work.contactnameout)) ) > 0 then 1
     when so_work.contactnameout is not null and len(so_work.contactnameout)>0  and position( upper(trim(li.lname)) in upper(trim(so_work.contactnameout)) ) = 0 then 0 end
as w_last_name_match,

so_work.contactqualityscore as w_contact_quality_score,
so_work.contactphonetype as w_contact_phone_type,
extract( days from (so_work.dateofporting - lead_universe.created ) ) as w_days_of_porting_since_in_infinity,

  case when (so_hom.notecodes like '%,1,%' or so_hom.notecodes  like '1,%' or so_hom.notecodes='1' or so_hom.notecodes  like '%,1') then 1
       else 0
  end as h_Is_Mailable,
  case when (so_hom.notecodes like '%,2,%' or so_hom.notecodes  like '2,%' or so_hom.notecodes='2' or so_hom.notecodes  like '%,2') then 1
       else 0
  end as h_Is_Connected,
  case when (so_hom.notecodes like '%,3,%' or so_hom.notecodes  like '3,%' or so_hom.notecodes='3' or so_hom.notecodes  like '%,3') then 1
       else 0
  end as h_Is_Ported,
  case when (so_hom.notecodes like '%,4,%' or so_hom.notecodes  like '4,%' or so_hom.notecodes='4' or so_hom.notecodes  like '%,4') then 1
       else 0
  end as h_Is_Wireless,
  case when (so_hom.notecodes like '%,5,%' or so_hom.notecodes  like '5,%' or so_hom.notecodes='5' or so_hom.notecodes  like '%,5') then 1
       else 0
  end as h_Is_Unknown_Contact,
  case when (so_hom.notecodes like '%,7,%' or so_hom.notecodes  like '7,%' or so_hom.notecodes='7' or so_hom.notecodes  like '%,7') then 1
       else 0
  end as h_Is_Toll_Free_Number,
  case when (so_hom.notecodes like '%,8,%' or so_hom.notecodes  like '8,%' or so_hom.notecodes='8' or so_hom.notecodes  like '%,8') then 1
       else 0
  end as h_Is_Google_Voice_Number,
  case when (so_hom.notecodes like '%,10,%' or so_hom.notecodes  like '10,%' or so_hom.notecodes='10' or so_hom.notecodes  like '%,10') then 1
       else 0
  end as h_Is_Possible_Disconnected,
  case when (so_hom.notecodes like '%,11,%' or so_hom.notecodes  like '11,%' or so_hom.notecodes='11' or so_hom.notecodes  like '%,11') then 1
       else 0
  end as h_Is_Portable_Voip,
  case when (so_hom.notecodes like '%,12,%' or so_hom.notecodes  like '12,%' or so_hom.notecodes='12' or so_hom.notecodes  like '%,12') then 1
       else 0
  end as h_Is_Possible_Portable_Voip,

case when so_hom.contactaddressout like '%PO BOX%' then 1
     when so_hom.contactaddressout is not null and len(so_hom.contactaddressout)>0 and so_hom.contactaddressout not like '%PO BOX%' then 0
  end as h_is_contact_address_po_box, 

case when levenshtein(so_hom.contactaddressout, upper(li.address)) < 8 then 1
  when so_hom.contactaddressout is not null and len(so_hom.contactaddressout)>0 and levenshtein(so_hom.contactaddressout, upper(li.address)) >= 8 then 0 end as h_contact_address_match_lev8,

case when so_hom.contactaddressout is not null and len(so_hom.contactaddressout)>0 then levenshtein(so_hom.contactaddressout, upper(li.address))
  else null end as h_cont_addr_lev_dist,
case when so_hom.contactaddressout is not null and len(so_hom.contactaddressout)>0 then 
  len(so_hom.contactaddressout) 
   else null end as h_cont_addr_len,
   case when so_hom.contactaddressout is not null and len(so_hom.contactaddressout)>0 then 
    (levenshtein(so_hom.contactaddressout, upper(li.address)))::float/greatest(len(so_hom.contactaddressout), len(li.address))
 else null end as h_cont_addr_lev_dist_ratio,

so_hom.contactqualityscore as h_contact_quality_score,
so_hom.contactphonetype as h_contact_phone_type,
extract( days from (so_hom.dateofporting - lead_universe.created ) ) as h_days_of_porting_since_in_infinity

-- make a view  instead of chart
-- Haversine distance (should be in SQL)
-- Provider zipcode distance from zipcode's 
-- area (312,773) match indicator, all three match (4 vars)
-- lead id correct to get
-- len of lead address, len of combined first and last name
-- days since ported from signature date

from lead_universe 
left outer join leads as li
on li.id=lead_universe.current_loan_leadid
left outer join so_data_and_contact_longt_alt as so_mob
on lead_universe.mobile_phone = so_mob.phone_number
left outer join so_data_and_contact_longt_alt as so_work
on lead_universe.work_phone = so_work.phone_number
left outer join so_data_and_contact_longt_alt as so_hom
on lead_universe.home_phone = so_hom.phone_number
order by current_loan_leadid  limit 10000 offset 20000